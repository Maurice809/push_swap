/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_sort_radix.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmoret <marvin@42lausanne.ch>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/10/06 20:55:26 by tmoret            #+#    #+#             */
/*   Updated: 2022/10/07 04:14:55 by tmoret           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void ft_sort_quick(t_state *state)
{
	int b;
	int n;
	
	b = state->a[state->a_count /2];
	n = state->a_count;
	printf("b : %i\n", b);
	printf("n : %i\n", n);
	ft_printstack(state);
	while (n-- > 0)
	{	
		if (state->a[0] < b)
			pb(state);
		else
			ra(state);
	}
	b = state->b[state->b_count /2];
	n = state->b_count;
	printf("b : %i\n", b);
    printf("n : %i\n", n);
	ft_printstack(state);
    while (n-- > 0)
    {   
        printf("-\n");
		if (state->b[0] > b)
            pa(state);
        else
            rb(state);
    }
   b-- ;
    n = state->b_count;
    ft_printstack(state);
    while (n-- > 0)
    {
        printf("-\n");
        if (state->b[0] > b)
            pa(state);
        else
            rb(state);
    }
	b = state->b[ft_fmin(state)];
	 n = state->b_count;
	 while (n-- > 0)
    {
        printf("-\n");
        if (state->b[0] > b)
            pa(state);
        else
            rb(state);
    }
	 pa(state);
	 printf("b : %i\n", b);
    printf("n : %i\n", n);
/*    while (n-- > 0)
    {
		if(state->b[0] < b)
            rb(state);
		if(state->b[0] < state->b[1])
			sb(state);
//		if(state->b[0] < b)
//			rb(state);

    }
	while (state->a[0] > state->b[0])
		pb(state);

 b = state->a[state->a_count /2];
    n = state->a_count;
    printf("b : %i\n", b); 
    printf("n : %i\n", n); 
    ft_printstack(state);
    while (n-- > 0)
    {   
        if (state->a[0] < b)
            pb(state);
        else
            ra(state);
    }
    b = state->a[ft_fmax(state)];
	printf("b : %i\n", b);
     n = state->a_count;
    ft_printstack(state);
//	ft_sort_10(state);	*/
	printf("b : %i\n", b);
	 printf("n : %i\n", n);
	ft_checkps(state);

}
